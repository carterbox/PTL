//
// MIT License
// Copyright (c) 2018 Jonathan R. Madsen
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
// ---------------------------------------------------------------
// Tasking class template implementation file
//
// Class Description:
//
// This file wraps a TBB task_group into a TBBTaskGroup
//
// ---------------------------------------------------------------
// Author: Jonathan Madsen (Jun 21st 2018)
// ---------------------------------------------------------------

#if defined(PTL_USE_TBB)

//============================================================================//

#include "PTL/VTask.hh"
#include "PTL/TaskGroup.hh"

#include <functional>
#include <memory>
#include <tbb/tbb.h>

class ThreadPool;
namespace
{
typedef tbb::task_group tbb_task_group_t;
}

//============================================================================//

template <typename _Tp, typename _Arg>
template <typename _Func>
TBBTaskGroup<_Tp, _Arg>::TBBTaskGroup(_Func _join, ThreadPool* _tp)
: base_type(_join, _tp),
  m_tbb_task_group(new tbb_task_group_t())
{ }

//============================================================================//

template <typename _Tp, typename _Arg>
template <typename _Func>
TBBTaskGroup<_Tp, _Arg>::TBBTaskGroup(
        int _freq, _Func _join, ThreadPool* _tp)
: base_type(_freq, _join, _tp),
  m_tbb_task_group(new tbb_task_group_t())
{ }

//============================================================================//

template <typename _Tp, typename _Arg>
TBBTaskGroup<_Tp, _Arg>::~TBBTaskGroup()
{
    delete m_tbb_task_group;
}

//============================================================================//

template <typename _Tp, typename _Arg>
inline void
TBBTaskGroup<_Tp, _Arg>::add(void_func_t _task, promise_type* _prom)
{
    auto _func = [=]()
    {
        _task();
        intmax_t _count = VTaskGroup::decrement();
        if(_count < 1)
        {
            AutoLock l(this->task_lock());
            CONDITIONBROADCAST(&(this->task_cond()));
        }
    };
    m_tbb_task_group->run(_func);
    m_task_set.push_back(data_type(false, _prom, ArgTp()));
}

//============================================================================//


#endif
