//
// MIT License
// Copyright (c) 2018 Jonathan R. Madsen
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
// ---------------------------------------------------------------
// Tasking class template implementation file
//
// Class Description:
//
// This file creates the a class for handling a group of tasks that
// can be independently joined
//
// ---------------------------------------------------------------
// Author: Jonathan Madsen (Feb 13th 2018)
// ---------------------------------------------------------------


#include <functional>
#include "PTL/VTask.hh"
#include "PTL/ThreadPool.hh"
#include "PTL/VUserTaskQueue.hh"
#include "PTL/ThreadData.hh"

class ThreadPool;

//============================================================================//

template <typename _Tp, typename _Arg>
template <typename _Func>
TaskGroup<_Tp, _Arg>::TaskGroup(_Func _join, ThreadPool* _tp)
: VTaskGroup(_tp)
{
    this->set_join_function<_Func>(_join);
}

//============================================================================//

template <typename _Tp, typename _Arg>
template <typename _Func>
TaskGroup<_Tp, _Arg>::TaskGroup(int _freq, _Func _join, ThreadPool* _tp)
: VTaskGroup(_tp)
{
    this->set_join_function<_Func>(_join);
    this->set_clear_frequency(_freq);
}

//============================================================================//

template <typename _Tp, typename _Arg>
TaskGroup<_Tp, _Arg>::~TaskGroup()
{ }

//============================================================================//

template <typename _Tp, typename _Arg>
template <typename _Func>
void TaskGroup<_Tp, _Arg>::set_join_function(_Func _join)
{
    using std::placeholders::_1;
    using std::placeholders::_2;
    m_join_function = std::bind<_Tp>(_join, _1, _2);
}

//============================================================================//

template <typename _Tp, typename _Arg>
inline void
TaskGroup<_Tp, _Arg>::add(promise_type* _p)
{
    m_task_set.push_back(data_type(false, _p, ArgTp()));
}

//============================================================================//

template <typename _Tp, typename _Arg>
inline _Tp TaskGroup<_Tp, _Arg>::join(_Tp accum)
{
    this->wait();
    for(auto itr = begin(); itr != end(); ++itr)
    {
        ArgTp _val = this->get(*itr);
        accum = m_join_function(accum, _val);
    }

    if(m_clear_freq.load() > 0 && (++m_clear_count) % m_clear_freq.load() == 0)
        this->clear();

    return accum;
}

//============================================================================//

template <typename _Tp, typename _Arg>
typename TaskGroup<_Tp, _Arg>::ArgTp
TaskGroup<_Tp, _Arg>::get(data_type& _data)
{
    if(!std::get<0>(_data))
    {
        promise_type* prom = std::get<1>(_data);
        if(prom)
        {
            std::get<2>(_data) = prom->get_future().get();
            delete prom;
            std::get<1>(_data) = nullptr;
        }
        std::get<0>(_data) = true;
    }
    return std::get<2>(_data);
}

//============================================================================//
